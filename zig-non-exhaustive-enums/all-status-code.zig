// generated by claude btw

const std = @import("std");

pub const HttpStatusCode = enum(u10) {
    // 1xx Informational responses
    continue_status = 100,
    switching_protocols = 101,
    processing = 102,
    early_hints = 103,

    // 2xx Success
    ok = 200,
    created = 201,
    accepted = 202,
    non_authoritative_information = 203,
    no_content = 204,
    reset_content = 205,
    partial_content = 206,
    multi_status = 207,
    already_reported = 208,
    im_used = 226,

    // 3xx Redirection
    multiple_choices = 300,
    moved_permanently = 301,
    found = 302,
    see_other = 303,
    not_modified = 304,
    use_proxy = 305,
    switch_proxy = 306, // No longer used
    temporary_redirect = 307,
    permanent_redirect = 308,

    // 4xx Client errors
    bad_request = 400,
    unauthorized = 401,
    payment_required = 402,
    forbidden = 403,
    not_found = 404,
    method_not_allowed = 405,
    not_acceptable = 406,
    proxy_authentication_required = 407,
    request_timeout = 408,
    conflict = 409,
    gone = 410,
    length_required = 411,
    precondition_failed = 412,
    payload_too_large = 413,
    uri_too_long = 414,
    unsupported_media_type = 415,
    range_not_satisfiable = 416,
    expectation_failed = 417,
    im_a_teapot = 418, // RFC 2324 (April Fools' joke)
    misdirected_request = 421,
    unprocessable_entity = 422,
    locked = 423,
    failed_dependency = 424,
    too_early = 425,
    upgrade_required = 426,
    precondition_required = 428,
    too_many_requests = 429,
    request_header_fields_too_large = 431,
    unavailable_for_legal_reasons = 451,

    // 5xx Server errors
    internal_server_error = 500,
    not_implemented = 501,
    bad_gateway = 502,
    service_unavailable = 503,
    gateway_timeout = 504,
    http_version_not_supported = 505,
    variant_also_negotiates = 506,
    insufficient_storage = 507,
    loop_detected = 508,
    not_extended = 510,
    network_authentication_required = 511,

    // Unofficial codes (widely used)
    // Cloudflare
    web_server_returned_unknown_error = 520,
    web_server_is_down = 521,
    connection_timed_out = 522,
    origin_is_unreachable = 523,
    timeout_occurred = 524,
    ssl_handshake_failed = 525,
    invalid_ssl_certificate = 526,
    railgun_error = 527,

    // AWS Elastic Load Balancer
    client_closed_connection = 460,
    load_balancer_received_x_forwarded_for_header = 463,
    incompatible_protocol_versions = 464,

    // nginx
    no_response = 444,
    ssl_certificate_error = 495,
    ssl_certificate_required = 496,
    http_request_sent_to_https_port = 497,
    token_expired_invalid = 498,
    client_closed_request = 499,

    // Microsoft IIS
    login_timeout = 440,
    retry_with = 449,
    // redirect = 451, Note: conflicts with standard 451
    request_header_too_large = 494,

    pub fn toString(self: HttpStatusCode) []const u8 {
        return switch (self) {
            // 1xx
            .continue_status => "100 Continue",
            .switching_protocols => "101 Switching Protocols",
            .processing => "102 Processing",
            .early_hints => "103 Early Hints",

            // 2xx
            .ok => "200 OK",
            .created => "201 Created",
            .accepted => "202 Accepted",
            .non_authoritative_information => "203 Non-Authoritative Information",
            .no_content => "204 No Content",
            .reset_content => "205 Reset Content",
            .partial_content => "206 Partial Content",
            .multi_status => "207 Multi-Status",
            .already_reported => "208 Already Reported",
            .im_used => "226 IM Used",

            // 3xx
            .multiple_choices => "300 Multiple Choices",
            .moved_permanently => "301 Moved Permanently",
            .found => "302 Found",
            .see_other => "303 See Other",
            .not_modified => "304 Not Modified",
            .use_proxy => "305 Use Proxy",
            .switch_proxy => "306 Switch Proxy",
            .temporary_redirect => "307 Temporary Redirect",
            .permanent_redirect => "308 Permanent Redirect",

            // 4xx
            .bad_request => "400 Bad Request",
            .unauthorized => "401 Unauthorized",
            .payment_required => "402 Payment Required",
            .forbidden => "403 Forbidden",
            .not_found => "404 Not Found",
            .method_not_allowed => "405 Method Not Allowed",
            .not_acceptable => "406 Not Acceptable",
            .proxy_authentication_required => "407 Proxy Authentication Required",
            .request_timeout => "408 Request Timeout",
            .conflict => "409 Conflict",
            .gone => "410 Gone",
            .length_required => "411 Length Required",
            .precondition_failed => "412 Precondition Failed",
            .payload_too_large => "413 Payload Too Large",
            .uri_too_long => "414 URI Too Long",
            .unsupported_media_type => "415 Unsupported Media Type",
            .range_not_satisfiable => "416 Range Not Satisfiable",
            .expectation_failed => "417 Expectation Failed",
            .im_a_teapot => "418 I'm a teapot",
            .misdirected_request => "421 Misdirected Request",
            .unprocessable_entity => "422 Unprocessable Entity",
            .locked => "423 Locked",
            .failed_dependency => "424 Failed Dependency",
            .too_early => "425 Too Early",
            .upgrade_required => "426 Upgrade Required",
            .precondition_required => "428 Precondition Required",
            .too_many_requests => "429 Too Many Requests",
            .request_header_fields_too_large => "431 Request Header Fields Too Large",
            .unavailable_for_legal_reasons => "451 Unavailable For Legal Reasons",

            // 5xx
            .internal_server_error => "500 Internal Server Error",
            .not_implemented => "501 Not Implemented",
            .bad_gateway => "502 Bad Gateway",
            .service_unavailable => "503 Service Unavailable",
            .gateway_timeout => "504 Gateway Timeout",
            .http_version_not_supported => "505 HTTP Version Not Supported",
            .variant_also_negotiates => "506 Variant Also Negotiates",
            .insufficient_storage => "507 Insufficient Storage",
            .loop_detected => "508 Loop Detected",
            .not_extended => "510 Not Extended",
            .network_authentication_required => "511 Network Authentication Required",

            // Unofficial codes
            .web_server_returned_unknown_error => "520 Web Server Returned an Unknown Error",
            .web_server_is_down => "521 Web Server Is Down",
            .connection_timed_out => "522 Connection Timed Out",
            .origin_is_unreachable => "523 Origin Is Unreachable",
            .timeout_occurred => "524 A Timeout Occurred",
            .ssl_handshake_failed => "525 SSL Handshake Failed",
            .invalid_ssl_certificate => "526 Invalid SSL Certificate",
            .railgun_error => "527 Railgun Error",
            .client_closed_connection => "460 Client Closed Connection",
            .load_balancer_received_x_forwarded_for_header => "463 Load Balancer Received X-Forwarded-For Header",
            .incompatible_protocol_versions => "464 Incompatible Protocol Versions",
            .no_response => "444 No Response",
            .ssl_certificate_error => "495 SSL Certificate Error",
            .ssl_certificate_required => "496 SSL Certificate Required",
            .http_request_sent_to_https_port => "497 HTTP Request Sent to HTTPS Port",
            .token_expired_invalid => "498 Token Expired/Invalid",
            .client_closed_request => "499 Client Closed Request",
            .login_timeout => "440 Login Timeout",
            .retry_with => "449 Retry With",
            // .redirect => "451 Redirect",
            .request_header_too_large => "494 Request Header Too Large",
        };
    }

    pub fn getStatusCode(self: HttpStatusCode) u16 {
        return @intFromEnum(self);
    }

    pub fn isInformational(self: HttpStatusCode) bool {
        const code = @intFromEnum(self);
        return code >= 100 and code < 200;
    }

    pub fn isSuccess(self: HttpStatusCode) bool {
        const code = @intFromEnum(self);
        return code >= 200 and code < 300;
    }

    pub fn isRedirection(self: HttpStatusCode) bool {
        const code = @intFromEnum(self);
        return code >= 300 and code < 400;
    }

    pub fn isClientError(self: HttpStatusCode) bool {
        const code = @intFromEnum(self);
        return code >= 400 and code < 500;
    }

    pub fn isServerError(self: HttpStatusCode) bool {
        const code = @intFromEnum(self);
        return code >= 500 and code < 600;
    }

    pub fn isError(self: HttpStatusCode) bool {
        return self.isClientError() or self.isServerError();
    }

    // Helper function to create from integer
    pub fn fromInt(code: u16) ?HttpStatusCode {
        return std.meta.intToEnum(HttpStatusCode, code) catch null;
    }
};

// Example usage and tests
test "HTTP status codes" {
    const testing = std.testing;

    // Test basic functionality
    try testing.expect(HttpStatusCode.ok.getStatusCode() == 200);
    try testing.expect(HttpStatusCode.not_found.getStatusCode() == 404);
    try testing.expect(HttpStatusCode.internal_server_error.getStatusCode() == 500);

    // Test category checks
    try testing.expect(HttpStatusCode.ok.isSuccess());
    try testing.expect(HttpStatusCode.not_found.isClientError());
    try testing.expect(HttpStatusCode.internal_server_error.isServerError());
    try testing.expect(HttpStatusCode.moved_permanently.isRedirection());
    try testing.expect(HttpStatusCode.continue_status.isInformational());

    // Test error check
    try testing.expect(HttpStatusCode.bad_request.isError());
    try testing.expect(!HttpStatusCode.ok.isError());

    // Test fromInt
    try testing.expect(HttpStatusCode.fromInt(200) == HttpStatusCode.ok);
    try testing.expect(HttpStatusCode.fromInt(999) == null);

    // Test toString
    try testing.expectEqualStrings(HttpStatusCode.ok.toString(), "200 OK");
    try testing.expectEqualStrings(HttpStatusCode.im_a_teapot.toString(), "418 I'm a teapot");
}
